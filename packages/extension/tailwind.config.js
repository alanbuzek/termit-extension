// mapping default tailwind rem values to pixels, as we can't rely on the page's base fontsize, rendering rems unusable for our use case
const remToPx = (str, base = 16) => {
  if (str.endsWith('rem')){
    const pixelValue = parseFloat(str.replace('rem', '')) * base;
    return  `${Math.floor(pixelValue)}px`;
  }
  return str;
}

module.exports = {
  content: ['./src/**'],
  theme: {
    extend: {
      fontFamily: {
        sans: [
          'Inter',
          '-apple-system',
          'BlinkMacSystemFont',
          'Segoe UI',
          'Roboto',
          'Helvetica',
          'Arial',
          'sans-serif',
        ],
      },
      // colors: {
      //   green: {
      //   TODO: add termit colors
      //     500: '#29ab87',
      //     400: '#29ab87',
      //   },
      // }
    },
    // override rems with pixels 
    columns: {
      auto: 'auto',
      1: '1',
      2: '2',
      3: '3',
      4: '4',
      5: '5',
      6: '6',
      7: '7',
      8: '8',
      9: '9',
      10: '10',
      11: '11',
      12: '12',
      '3xs': remToPx('16rem'),
      '2xs': remToPx('18rem'),
      xs: remToPx('20rem'),
      sm: remToPx('24rem'),
      md: remToPx('28rem'),
      lg: remToPx('32rem'),
      xl: remToPx('36rem'),
      '2xl': remToPx('42rem'),
      '3xl': remToPx('48rem'),
      '4xl': remToPx('56rem'),
      '5xl': remToPx('64rem'),
      '6xl': remToPx('72rem'),
      '7xl': remToPx('80rem'),
    },
    spacing: {
      px: '1px',
      0: '0px',
      0.5: remToPx('0.125rem'),
      1: remToPx('0.25rem'),
      1.5: remToPx('0.375rem'),
      2: remToPx('0.5rem'),
      2.5: remToPx('0.625rem'),
      3: remToPx('0.75rem'),
      3.5: remToPx('0.875rem'),
      4: remToPx('1rem'),
      5: remToPx('1.25rem'),
      6: remToPx('1.5rem'),
      7: remToPx('1.75rem'),
      8: remToPx('2rem'),
      9: remToPx('2.25rem'),
      10: remToPx('2.5rem'),
      11: remToPx('2.75rem'),
      12: remToPx('3rem'),
      14: remToPx('3.5rem'),
      16: remToPx('4rem'),
      20: remToPx('5rem'),
      24: remToPx('6rem'),
      28: remToPx('7rem'),
      32: remToPx('8rem'),
      36: remToPx('9rem'),
      40: remToPx('10rem'),
      44: remToPx('11rem'),
      48: remToPx('12rem'),
      52: remToPx('13rem'),
      56: remToPx('14rem'),
      60: remToPx('15rem'),
      64: remToPx('16rem'),
      72: remToPx('18rem'),
      80: remToPx('20rem'),
      96: remToPx('24rem'),
    },
    borderRadius: {
      none: '0px',
      sm: remToPx('0.125rem'),
      DEFAULT: remToPx('0.25rem'),
      md: remToPx('0.375rem'),
      lg: remToPx('0.5rem'),
      xl: remToPx('0.75rem'),
      '2xl': remToPx('1rem'),
      '3xl': remToPx('1.5rem'),
      full: '9999px',
    },
    fontSize: {
      xs: [remToPx('0.75rem'), { lineHeight:remToPx('1rem') }],
      sm: [remToPx('0.875rem'), { lineHeight: remToPx('1.25rem') }],
      base: [remToPx('1rem'), { lineHeight: remToPx('1.5rem') }],
      lg: [remToPx('1.125rem'), { lineHeight: remToPx('1.75rem') }],
      xl: [remToPx('1.25rem'), { lineHeight: remToPx('1.75rem') }],
      '2xl': [remToPx('1.5rem'), { lineHeight:remToPx('2rem') }],
      '3xl': [remToPx('1.875rem'), { lineHeight: remToPx('2.25rem') }],
      '4xl': [remToPx('2.25rem'), { lineHeight: remToPx('2.5rem') }],
      '5xl': [remToPx('3rem'), { lineHeight: '1' }],
      '6xl': [remToPx('3.75rem'), { lineHeight: '1' }],
      '7xl': [remToPx('4.5rem'), { lineHeight: '1' }],
      '8xl': [remToPx('6rem'), { lineHeight: '1' }],
      '9xl': [remToPx('8rem'), { lineHeight: '1' }],
    },
    lineHeight: {
      none: '1',
      tight: '1.25',
      snug: '1.375',
      normal: '1.5',
      relaxed: '1.625',
      loose: '2',
      3: remToPx('.75rem'),
      4: remToPx('1rem'),
      5: remToPx('1.25rem'),
      6: remToPx('1.5rem'),
      7: remToPx('1.75rem'),
      8: remToPx('2rem'),
      9: remToPx('2.25rem'),
      10: remToPx('2.5rem'),
    },
    maxWidth: ({ theme, breakpoints }) => ({
      none: 'none',
      0: remToPx('0rem'),
      xs: remToPx('20rem'),
      sm: remToPx('24rem'),
      md: remToPx('28rem'),
      lg: remToPx('32rem'),
      xl: remToPx('36rem'),
      '2xl': remToPx('42rem'),
      '3xl': remToPx('48rem'),
      '4xl': remToPx('56rem'),
      '5xl': remToPx('64rem'),
      '6xl': remToPx('72rem'),
      '7xl': remToPx('80rem'),
      full: '100%',
      min: 'min-content',
      max: 'max-content',
      fit: 'fit-content',
      prose: '65ch',
      ...breakpoints(theme('screens')),
    }),
  },
  variants: {
    extend: {},
  },
  plugins: [],
};