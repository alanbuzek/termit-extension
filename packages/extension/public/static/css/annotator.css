/* from bootstrap-termic.css */
.popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 106000;
  display: block;
  max-width: 276px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
    "Segoe UI Symbol", "Noto Color Emoji";
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
  font-size: 0.875rem;
  word-wrap: break-word;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid rgba(0, 0, 0, 0.2);
}
.popover .arrow {
  position: absolute;
  display: block;
  width: 1rem;
  height: 0.5rem;
  margin: 0 0.3rem;
}
.popover .arrow::before,
.popover .arrow::after {
  position: absolute;
  display: block;
  content: "";
  border-color: transparent;
  border-style: solid;
}
.popover-header {
  padding: 0.5rem 0.75rem;
  margin-bottom: 0;
  font-size: 1rem;
  color: inherit;
  background-color: #f7f7f7;
  border-bottom: 1px solid #ebebeb;
}
.popover-header:empty {
  display: none;
}
.popover-body {
  padding: 0.5rem 0.75rem;
  color: #212529;
}

/* -------------end of popover */

:root {
  --zindex-tooltip: 1070;
  --tooltip-margin: 0;
  /* TODO: adjust */
  --tooltip-font-size: 0.875rem;
  --tooltip-opacity: 0.9;
  --tooltip-arrow-width: 0.8rem;
  --tooltip-arrow-width-half: 0.4rem;
  --tooltip-arrow-height: 0.4rem;
  --tooltip-arrow-color: #000000;
  --tooltip-max-width: 200px;
  --tooltip-padding-y: 0.25rem;
  --tooltip-padding-x: 0.5rem;
  --tooltip-color: #ffffff;
  --tooltip-bg: #000000;
}

/* tooltip */
.tooltip {
  position: absolute;
  z-index: var(--zindex-tooltip);
  display: block;
  margin: var(--tooltip-margin);
  font-size: var(--tooltip-font-size);
  word-wrap: break-word;
  opacity: 0;
}

.tooltip.show {
  opacity: var(--tooltip-opacity);
}

.tooltip .arrow {
  position: absolute;
  display: block;
  width: var(--tooltip-arrow-width);
  height: var(--tooltip-arrow-height);
}

.tooltip .arrow::before {
  position: absolute;
  content: "";
  border-color: transparent;
  border-style: solid;
}

/* Wrapper for the tooltip content */
.tooltip-inner {
  max-width: var(--tooltip-max-width);
  padding: var(--tooltip-padding-y) var(--tooltip-padding-x);
  color: var(--tooltip-color);
  text-align: center;
  background-color: var(--tooltip-bg);
}

/* ---- end--- */
.ReactVirtualized__Table__headerRow {
  font-weight: 700;
  text-transform: uppercase;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  flex-direction: row;
  -webkit-box-align: center;
  align-items: center;
}
.ReactVirtualized__Table__row {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  flex-direction: row;
  -webkit-box-align: center;
  align-items: center;
}

.ReactVirtualized__Table__headerTruncatedText {
  display: inline-block;
  max-width: 100%;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

.ReactVirtualized__Table__headerColumn,
.ReactVirtualized__Table__rowColumn {
  margin-right: 10px;
  min-width: 0px;
}
.ReactVirtualized__Table__rowColumn {
  text-overflow: ellipsis;
  white-space: nowrap;
}

.ReactVirtualized__Table__headerColumn:first-of-type,
.ReactVirtualized__Table__rowColumn:first-of-type {
  margin-left: 10px;
}
.ReactVirtualized__Table__sortableHeaderColumn {
  cursor: pointer;
}
.ReactVirtualized__Table__sortableHeaderIcon {
  -webkit-box-flex: 0;
  flex: 0 0 24px;
  height: 1em;
  width: 1em;
  fill: currentColor;
}

/* react-virtualized */

.term-occurrence-card {
  background-color: white;
}

.term-occurrence-card:hover {
  background-color: #f3f4f6 !important;
}

/* termit-h.termit-h-hovered {
  background-color: rgb(126, 241, 32) !important;
} */
.assigned-term-occurrence:hover {
  background: rgba(116, 237, 108, 0.8) !important;
}
.suggested-term-occurrence:hover {
  background: rgba(253, 203, 168, 0.8) !important;
}
.invalid-term-occurrence:hover {
  background: rgba(235, 5, 5, 0.7) !important;
}
.term-definition:hover {
  background: rgba(80, 200, 255, 0.8) !important;
}
.pending-term-definition:hover {
  background: rgba(26, 0, 157, 0.2) !important;
}

svg {
  display: inline-block !important;
}

/* popovoer start */

.popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 206000;
  display: block;
  max-width: 276px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
    "Segoe UI Symbol", "Noto Color Emoji";
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
  font-size: 0.875rem;
  word-wrap: break-word;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid rgba(0, 0, 0, 0.2);
}
.popover .arrow {
  position: absolute;
  display: block;
  width: 1rem;
  height: 0.5rem;
  margin: 0 0.3rem;
}
.popover .arrow::before,
.popover .arrow::after {
  position: absolute;
  display: block;
  content: "";
  border-color: transparent;
  border-style: solid;
}
.popover-header {
  padding: 0.5rem 0.75rem;
  margin-bottom: 0;
  font-size: 1rem;
  color: inherit;
  background-color: #f7f7f7;
  border-bottom: 1px solid #ebebeb;
}
.popover-header:empty {
  display: none;
}
.popover-body {
  padding: 0.5rem 0.75rem;
  color: #212529;
}

/* -------------end of popover */

:root {
  --zindex-tooltip: 1070;
  --tooltip-margin: 0;
  /* TODO: adjust */
  --tooltip-font-size: 0.875rem;
  --tooltip-opacity: 0.9;
  --tooltip-arrow-width: 0.8rem;
  --tooltip-arrow-width-half: 0.4rem;
  --tooltip-arrow-height: 0.4rem;
  --tooltip-arrow-color: #000000;
  --tooltip-max-width: 200px;
  --tooltip-padding-y: 0.25rem;
  --tooltip-padding-x: 0.5rem;
  --tooltip-color: #ffffff;
  --tooltip-bg: #000000;
}

/* tooltip */
.tooltip {
  position: absolute;
  z-index: var(--zindex-tooltip);
  display: block;
  margin: var(--tooltip-margin);
  font-size: var(--tooltip-font-size);
  word-wrap: break-word;
  opacity: 0;
}

.tooltip.show {
  opacity: var(--tooltip-opacity);
}

.tooltip .arrow {
  position: absolute;
  display: block;
  width: var(--tooltip-arrow-width);
  height: var(--tooltip-arrow-height);
}

.tooltip .arrow::before {
  position: absolute;
  content: "";
  border-color: transparent;
  border-style: solid;
}

/* Wrapper for the tooltip content */
.tooltip-inner {
  max-width: var(--tooltip-max-width);
  padding: var(--tooltip-padding-y) var(--tooltip-padding-x);
  color: var(--tooltip-color);
  text-align: center;
  background-color: var(--tooltip-bg);
}

/* ----end of tooltips ---------------******* */

/* Intelligent tree styles below -> */
.result-item {
  padding-left: 2px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  cursor: pointer;
  width: 100%;
}
.VirtualizedTreeSelectTooltip {
  max-width: 300px;
  text-align: start;
  word-break: break-all;
}

.toggleButton {
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.highlighted {
  font-weight: bold;
  background: none;
}

.VirtualizedSelectOption {
  cursor: default;
}
/* End */

/* My styles pulled from termit */
html {
  height: 100%;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}
body {
  height: 100%;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}
header .nav-tabs {
  background: rgba(0, 0, 0, 0.03);
  border-bottom: 1px solid #dee2e6;
}
.nav-link {
  padding: 0.5rem 1rem;
}
header .nav-tabs {
  text-align: center;
  justify-content: center;
  padding-top: 0.3em;
}
.card {
  margin-bottom: 2rem;
}
.row .card {
  margin-bottom: 0.75rem;
  box-shadow: 6px 0 20px 0 #ced4da;
}
@media (min-width: 768px) {
  .row .card {
    margin-bottom: 1.3rem;
  }
}
.underline {
  text-decoration: underline;
}
.relative {
  position: relative;
}
.btn-toolbar > button {
  margin-left: 0.5rem;
}
.btn-toolbar > button:first-child {
  margin-left: 0;
}
.btn-toolbar > .btn-group {
  margin-left: 0.5rem;
}
.btn-toolbar > .btn-group:first-child {
  margin-left: 0;
}
.card-header h5 {
  margin-bottom: 0;
}
.dropdown-item {
  cursor: pointer;
}
.badge {
  color: gray;
  font-weight: 700;
}
.alert-dismissible {
  padding-right: 2.3rem !important;
}
.Select-placeholder {
  font-style: italic;
}
.validation-feedback {
  display: block !important;
  visibility: visible !important;
}
.content {
  min-height: 100%;
  margin-top: 40px;
}
.attribute-label {
  font-weight: 600;
  color: rgba(0, 0, 0, 0.7);
  word-break: break-word;
  margin-bottom: 0;
}
.form-group .attribute-label {
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
}
/* Reactstrap overrides this by assigning form-control class to all form-controls, including small ones*/
.Select-placeholder {
  font-size: 0.875rem !important;
}
.Select-value {
  font-size: 0.875rem !important;
}
.tree-result-item-toggle-button {
  width: 16px;
}
.Select-loading-zone {
  padding-left: 5px;
}
ul.term-items {
  padding-left: 1.2rem;
}
.Select-menu-outer {
  z-index: 3;
}

/*  */
.react-toggle {
  touch-action: pan-x;

  display: inline-block;
  position: relative;
  cursor: pointer;
  background-color: transparent;
  border: 0;
  padding: 0;

  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-tap-highlight-color: transparent;
}

.react-toggle-screenreader-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.react-toggle--disabled {
  cursor: not-allowed;
  opacity: 0.5;
  -webkit-transition: opacity 0.25s;
  transition: opacity 0.25s;
}

.react-toggle-track {
  width: 50px;
  height: 24px;
  padding: 0;
  border-radius: 30px;
  background-color: #4d4d4d;
  -webkit-transition: all 0.2s ease;
  -moz-transition: all 0.2s ease;
  transition: all 0.2s ease;
}

.react-toggle:hover:not(.react-toggle--disabled) .react-toggle-track {
  background-color: #000000;
}

.react-toggle--checked .react-toggle-track {
  background-color: #19ab27;
}

.react-toggle--checked:hover:not(.react-toggle--disabled) .react-toggle-track {
  background-color: #128d15;
}

.react-toggle-track-check {
  position: absolute;
  width: 14px;
  height: 10px;
  top: 0px;
  bottom: 0px;
  margin-top: auto;
  margin-bottom: auto;
  line-height: 0;
  left: 8px;
  opacity: 0;
  -webkit-transition: opacity 0.25s ease;
  -moz-transition: opacity 0.25s ease;
  transition: opacity 0.25s ease;
}

.react-toggle--checked .react-toggle-track-check {
  opacity: 1;
  -webkit-transition: opacity 0.25s ease;
  -moz-transition: opacity 0.25s ease;
  transition: opacity 0.25s ease;
}

.react-toggle-track-x {
  position: absolute;
  width: 10px;
  height: 10px;
  top: 0px;
  bottom: 0px;
  margin-top: auto;
  margin-bottom: auto;
  line-height: 0;
  right: 10px;
  opacity: 1;
  -webkit-transition: opacity 0.25s ease;
  -moz-transition: opacity 0.25s ease;
  transition: opacity 0.25s ease;
}

.react-toggle--checked .react-toggle-track-x {
  opacity: 0;
}

.react-toggle-thumb {
  transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1) 0ms;
  position: absolute;
  top: 1px;
  left: 1px;
  width: 22px;
  height: 22px;
  border: 1px solid #4d4d4d;
  border-radius: 50%;
  background-color: #fafafa;

  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  -webkit-transition: all 0.25s ease;
  -moz-transition: all 0.25s ease;
  transition: all 0.25s ease;
}

.react-toggle--checked .react-toggle-thumb {
  left: 27px;
  border-color: #19ab27;
}

.react-toggle--focus .react-toggle-thumb {
  -webkit-box-shadow: 0px 0px 3px 2px #0099e0;
  -moz-box-shadow: 0px 0px 3px 2px #0099e0;
  box-shadow: 0px 0px 2px 3px #0099e0;
}

.react-toggle:active:not(.react-toggle--disabled) .react-toggle-thumb {
  -webkit-box-shadow: 0px 0px 5px 5px #0099e0;
  -moz-box-shadow: 0px 0px 5px 5px #0099e0;
  box-shadow: 0px 0px 5px 5px #0099e0;
}

/* -------------- */

form hr.form-section-separator {
  position: relative;
  border: none;
  height: 1px;
  background: #dee2e6;
  margin-top: 0;
  margin-bottom: 1rem;
}

.attribute-label {
  margin-bottom: 0.5rem !important;
}
button.btn {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
}
/* Annotation.css */

.assigned-term-occurrence {
  background: rgba(188, 239, 184, 0.8) !important;
}

.suggested-term-occurrence {
  background: rgba(239, 207, 184, 0.8) !important;
}

.invalid-term-occurrence {
  background: rgba(239, 66, 24, 0.7) !important;
}

.assigned-term-occurrence.proposed-occurrence {
  border: 0.15em dotted green !important;
}

.suggested-term-occurrence.proposed-occurrence {
  border: 0.15em dotted rgb(239, 69, 27) !important;
}

.invalid-term-occurrence.proposed-occurrence {
  border: 0.15em dotted rgb(239, 14, 0) !important;
}

.term-definition {
  background: rgba(80, 200, 255, 0.8) !important;
}

.pending-term-definition {
  background: rgba(150, 130, 255, 0.2) !important;
}

.selected-occurrence {
}

.popover {
  max-width: none !important;
  min-width: 300px !important;
}

.pwa-popup-title {
  margin-right: 20px !important;
}

.an-warning {
  color: orangered !important;
}

.an-error {
  color: red !important;
}

.popover-body {
  background-color: rgba(230, 230, 230, 1) !important;
}

.popover-body td.label {
  min-width: 110px !important;
}

.popover-header {
  background-color: rgba(220, 220, 220, 1) !important;
}

/* ANnotation.css end */
/* my custom styles */
.sub {
  font-family: Open Sans, sans-serif;
  font-size: 65%;
  margin-left: -0.1rem;
}
.tooltip {
  left: 3px !important;
}
.Select {
  position: relative;
}
.Select input::-webkit-contacts-auto-fill-button,
.Select input::-webkit-credentials-auto-fill-button {
  display: none !important;
}
.Select input::-ms-clear,
.Select input::-ms-reveal {
  display: none !important;
}
.Select,
.Select div,
.Select input,
.Select span {
  box-sizing: border-box;
}
.Select.is-disabled .Select-arrow-zone {
  cursor: default;
  opacity: 0.35;
  pointer-events: none;
}
.Select.is-disabled > .Select-control {
  background-color: #f9f9f9;
}
.Select.is-disabled > .Select-control:hover {
  box-shadow: none;
}
.Select.is-open > .Select-control {
  background: #fff;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  border-color: #b3b3b3 #ccc #d9d9d9;
}
.Select.is-open > .Select-control .Select-arrow {
  border-color: transparent transparent #999;
  border-width: 0 5px 5px;
  top: -2px;
}
.Select.is-searchable.is-focused:not(.is-open) > .Select-control,
.Select.is-searchable.is-open > .Select-control {
  cursor: text;
}
.Select.is-focused > .Select-control {
  background: #fff;
}
.Select.is-focused:not(.is-open) > .Select-control {
  background: #fff;
  border-color: #007eff;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),
    0 0 0 3px rgba(0, 126, 255, 0.1);
}
.Select.has-value.is-clearable.Select--single > .Select-control .Select-value {
  padding-right: 42px;
}
.Select.has-value.Select--single
  > .Select-control
  .Select-value
  .Select-value-label,
.Select.has-value.is-pseudo-focused.Select--single
  > .Select-control
  .Select-value
  .Select-value-label {
  color: #333;
}
.Select.has-value.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label,
.Select.has-value.is-pseudo-focused.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label {
  cursor: pointer;
  text-decoration: none;
}
.Select.has-value.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label:focus,
.Select.has-value.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label:hover,
.Select.has-value.is-pseudo-focused.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label:focus,
.Select.has-value.is-pseudo-focused.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label:hover {
  color: #007eff;
  outline: none;
  text-decoration: underline;
}
.Select.has-value.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label:focus,
.Select.has-value.is-pseudo-focused.Select--single
  > .Select-control
  .Select-value
  a.Select-value-label:focus {
  background: #fff;
}
.Select.has-value.is-pseudo-focused .Select-input {
  opacity: 0;
}
.Select .Select-arrow-zone:hover > .Select-arrow,
.Select.is-open .Select-arrow {
  border-top-color: #666;
}
.Select.Select--rtl {
  direction: rtl;
  text-align: right;
}
.Select-control {
  background-color: #fff;
  border: 1px solid #ccc;
  border-collapse: separate;
  border-radius: 4px;
  border-spacing: 0;
  color: #333;
  cursor: default;
  display: table;
  height: 36px;
  outline: none;
  overflow: hidden;
  position: relative;
  width: 100%;
}
.Select-control:hover {
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);
}
.Select-control .Select-input:focus {
  background: #fff;
  outline: none;
}
.Select--single > .Select-control .Select-value,
.Select-placeholder {
  bottom: 0;
  color: #aaa;
  left: 0;
  line-height: 34px;
  max-width: 100%;
  overflow: hidden;
  padding-left: 10px;
  padding-right: 10px;
  position: absolute;
  right: 0;
  text-overflow: ellipsis;
  top: 0;
  white-space: nowrap;
}
.Select-input {
  height: 34px;
  padding-left: 10px;
  padding-right: 10px;
  vertical-align: middle;
}
.Select-input > input {
  -webkit-appearance: none;
  background: none transparent;
  border: 0;
  box-shadow: none;
  cursor: default;
  display: inline-block;
  font-family: inherit;
  font-size: inherit;
  line-height: 17px;
  margin: 0;
  outline: none;
  padding: 8px 0 12px;
  width: 100%;
}
.is-focused .Select-input > input {
  cursor: text;
}
.has-value.is-pseudo-focused .Select-input {
  opacity: 0;
}
.Select-control:not(.is-searchable) > .Select-input {
  outline: none;
}
.Select-loading-zone {
  cursor: pointer;
  display: table-cell;
  text-align: center;
}
.Select-loading,
.Select-loading-zone {
  position: relative;
  vertical-align: middle;
  width: 16px;
}
.Select-loading {
  -webkit-animation: Select-animation-spin 0.4s linear infinite;
  animation: Select-animation-spin 0.4s linear infinite;
  border: 2px solid #ccc;
  border-radius: 50%;
  border-right-color: #333;
  box-sizing: border-box;
  display: inline-block;
  height: 16px;
}
.Select-clear-zone {
  -webkit-animation: Select-animation-fadeIn 0.2s;
  animation: Select-animation-fadeIn 0.2s;
  color: #999;
  cursor: pointer;
  display: table-cell;
  position: relative;
  text-align: center;
  vertical-align: middle;
  width: 17px;
}
.Select-clear-zone:hover {
  color: #d0021b;
}
.Select-clear {
  display: inline-block;
  font-size: 18px;
  line-height: 1;
}
.Select--multi .Select-clear-zone {
  width: 17px;
}
.Select-arrow-zone {
  cursor: pointer;
  display: table-cell;
  padding-right: 5px;
  position: relative;
  text-align: center;
  vertical-align: middle;
  width: 25px;
}
.Select--rtl .Select-arrow-zone {
  padding-left: 5px;
  padding-right: 0;
}
.Select-arrow {
  border-color: #999 transparent transparent;
  border-style: solid;
  border-width: 5px 5px 2.5px;
  display: inline-block;
  height: 0;
  position: relative;
  width: 0;
}
.Select-control > :last-child {
  padding-right: 5px;
}
.Select--multi .Select-multi-value-wrapper {
  display: inline-block;
}
.Select .Select-aria-only {
  clip: rect(0, 0, 0, 0);
  display: inline-block;
  float: left;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  position: absolute;
  width: 1px;
}
@-webkit-keyframes Select-animation-fadeIn {
  0% {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes Select-animation-fadeIn {
  0% {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
.Select-menu-outer {
  -webkit-overflow-scrolling: touch;
  background-color: #fff;
  border: 1px solid #ccc;
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
  border-top-color: #e6e6e6;
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.06);
  box-sizing: border-box;
  left: 0;
  margin-top: -1px;
  max-height: 200px;
  position: absolute;
  top: 100%;
  width: 100%;
  z-index: 1;
}
.Select-menu {
  max-height: 198px;
  overflow-y: auto;
}
.Select-option {
  background-color: #fff;
  box-sizing: border-box;
  color: #666;
  cursor: pointer;
  display: block;
  padding: 8px 10px;
}
.Select-option:last-child {
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
}
.Select-option.is-selected {
  background-color: #f5faff;
  background-color: rgba(0, 126, 255, 0.04);
  color: #333;
}
.Select-option.is-focused {
  background-color: #ebf5ff;
  background-color: rgba(0, 126, 255, 0.08);
  color: #333;
}
.Select-option.is-disabled {
  color: #ccc;
  cursor: default;
}
.Select-noresults {
  box-sizing: border-box;
  color: #999;
  cursor: default;
  display: block;
  padding: 8px 10px;
}
.Select--multi .Select-input {
  margin-left: 10px;
  padding: 0;
  vertical-align: middle;
}
.Select--multi.Select--rtl .Select-input {
  margin-left: 0;
  margin-right: 10px;
}
.Select--multi.has-value .Select-input {
  margin-left: 5px;
}
.Select--multi .Select-value {
  background-color: #ebf5ff;
  background-color: rgba(0, 126, 255, 0.08);
  border: 1px solid #c2e0ff;
  border: 1px solid rgba(0, 126, 255, 0.24);
  border-radius: 2px;
  color: #007eff;
  display: inline-block;
  font-size: 0.9em;
  line-height: 1.4;
  margin-left: 5px;
  margin-top: 5px;
  vertical-align: top;
}
.Select--multi .Select-value-icon,
.Select--multi .Select-value-label {
  display: inline-block;
  vertical-align: middle;
}
.Select--multi .Select-value-label {
  border-bottom-right-radius: 2px;
  border-top-right-radius: 2px;
  cursor: default;
  padding: 2px 5px;
}
.Select--multi a.Select-value-label {
  color: #007eff;
  cursor: pointer;
  text-decoration: none;
}
.Select--multi a.Select-value-label:hover {
  text-decoration: underline;
}
.Select--multi .Select-value-icon {
  border-bottom-left-radius: 2px;
  border-right: 1px solid #c2e0ff;
  border-right: 1px solid rgba(0, 126, 255, 0.24);
  border-top-left-radius: 2px;
  cursor: pointer;
  padding: 1px 5px 3px;
}
.Select--multi .Select-value-icon:focus,
.Select--multi .Select-value-icon:hover {
  background-color: #d8eafd;
  background-color: rgba(0, 113, 230, 0.08);
  color: #0071e6;
}
.Select--multi .Select-value-icon:active {
  background-color: #c2e0ff;
  background-color: rgba(0, 126, 255, 0.24);
}
.Select--multi.Select--rtl .Select-value {
  margin-left: 0;
  margin-right: 5px;
}
.Select--multi.Select--rtl .Select-value-icon {
  border-left: 1px solid #c2e0ff;
  border-left: 1px solid rgba(0, 126, 255, 0.24);
  border-right: none;
}
.Select--multi.is-disabled .Select-value {
  background-color: #fcfcfc;
  border: 1px solid #e3e3e3;
  color: #333;
}
.Select--multi.is-disabled .Select-value-icon {
  border-right: 1px solid #e3e3e3;
  cursor: not-allowed;
}
.Select--multi.is-disabled .Select-value-icon:active,
.Select--multi.is-disabled .Select-value-icon:focus,
.Select--multi.is-disabled .Select-value-icon:hover {
  background-color: #fcfcfc;
}
@keyframes Select-animation-spin {
  to {
    -webkit-transform: rotate(1turn);
    transform: rotate(1turn);
  }
}
@-webkit-keyframes Select-animation-spin {
  to {
    -webkit-transform: rotate(1turn);
  }
}
.ReactVirtualized__Table__headerRow {
  font-weight: 700;
  text-transform: uppercase;
}
.ReactVirtualized__Table__headerRow,
.ReactVirtualized__Table__row {
  align-items: center;
  display: flex;
  flex-direction: row;
}
.ReactVirtualized__Table__headerTruncatedText {
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ReactVirtualized__Table__headerColumn,
.ReactVirtualized__Table__rowColumn {
  margin-right: 10px;
  min-width: 0;
}
.ReactVirtualized__Table__rowColumn {
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ReactVirtualized__Table__headerColumn:first-of-type,
.ReactVirtualized__Table__rowColumn:first-of-type {
  margin-left: 10px;
}
.ReactVirtualized__Table__sortableHeaderColumn {
  cursor: pointer;
}
.ReactVirtualized__Table__sortableHeaderIcon {
  fill: currentColor;
  flex: 0 0 24px;
  height: 1em;
  width: 1em;
}
.VirtualSelectGrid {
  z-index: 1;
}
.VirtualizedSelectOption {
  align-items: center;
  cursor: pointer;
  display: flex;
  padding: 0 0.5rem;
}
.VirtualizedSelectFocusedOption {
  background-color: rgba(0, 126, 255, 0.1);
}
.VirtualizedSelectDisabledOption {
  opacity: 0.5;
}
.VirtualizedSelectSelectedOption {
  font-weight: 700;
}
.VirtualizedTreeSelectTooltip {
  word-break: normal !important;
}
.result-item {
  cursor: pointer;
  overflow: hidden;
  padding-left: 2px;
  text-overflow: ellipsis;
  white-space: nowrap;
  width: 100%;
}
.VirtualizedTreeSelectTooltip {
  max-width: 300px;
  text-align: start;
  word-break: break-all;
}
.toggleButton {
  align-items: center;
  cursor: pointer;
  display: flex;
  justify-content: center;
}
.highlighted {
  background: none;
  font-weight: 700;
}
.VirtualizedSelectOption {
  cursor: default;
}
.hidden {
  visibility: hidden;
}
.search {
  margin-right: 0.5rem;
  min-width: 18rem;
  position: relative;
}
.search input {
  border: 1px solid #adb5bd !important;
  border-left: none !important;
}
.navbar-collapse {
  overflow-y: visible !important;
  overflow-y: initial !important;
  padding-bottom: 45px;
}
.brand {
  color: #29ab87 !important;
  font-size: 1.7rem !important;
  font-weight: 700;
}
.brand:hover {
  color: #38cfa5 !important;
}
.navbar-collapse .navbar-toggler span {
  width: 120% !important;
}
table.widget {
  margin-bottom: 0;
}
.content {
  margin-top: 40px;
  min-height: 100%;
}
.attribute-label {
  color: rgba(0, 0, 0, 0.7);
  font-weight: 600;
  margin-bottom: 0;
  word-break: break-word;
}
.form-group .attribute-label {
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
}
@media (max-width: 767px) {
  .navbar {
    padding: 0.5rem !important;
  }
}
.Select-placeholder,
.Select-value {
  font-size: 0.875rem !important;
}

/*  custom styles end */
@charset "UTF-8";
/*
! tailwindcss v3.0.18 | MIT License | https://tailwindcss.com
*/
/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/
*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: #dbdbdb; /* 2 */
}
::before,
::after {
  --tw-content: "";
}
/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
*/
html {
  line-height: 1.5; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  -moz-tab-size: 4; /* 3 */
  tab-size: 4; /* 3 */
  font-family: "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif; /* 4 */
}
/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/
body {
  margin: 0; /* 1 */
  line-height: inherit; /* 2 */
}
/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/
hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
  border-top-width: 1px; /* 3 */
}
/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/
/*
Remove the default font size and weight for headings.
*/

h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}
/*
Reset links to optimize for opt-in styling instead of opt-out.
*/
a {
  color: inherit;
  text-decoration: inherit;
}
/*
Add the correct font weight in Edge and Safari.
*/
b,
strong {
  font-weight: bolder;
}
/*
1. Use the user's configured `mono` font family by default.
2. Correct the odd `em` font sizing in all browsers.
*/
code,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    "Liberation Mono", "Courier New", monospace; /* 1 */
  font-size: 1em; /* 2 */
}
/*
Add the correct font size in all browsers.
*/
small {
  font-size: 80%;
}
/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/
sub {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/
table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
  border-collapse: collapse; /* 3 */
}
/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/
button,
input,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: inherit; /* 1 */
  color: inherit; /* 1 */
  margin: 0; /* 2 */
  padding: 0; /* 3 */
}
/*
Remove the inheritance of text transform in Edge and Firefox.
*/
button,
select {
  text-transform: none;
}
/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 1 */
  background-color: transparent; /* 2 */
  background-image: none; /* 2 */
}
/*
Use the modern Firefox focus style for all focusable elements.
*/
/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/
/*
Add the correct vertical alignment in Chrome and Firefox.
*/
progress {
  vertical-align: baseline;
}
/*
Correct the cursor style of increment and decrement buttons in Safari.
*/
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}
/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/
[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}
/*
Remove the inner padding in Chrome and Safari on macOS.
*/
::-webkit-search-decoration {
  -webkit-appearance: none;
}
/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}
/*
Add the correct display in Chrome and Safari.
*/
summary {
  display: list-item;
}
/*
Removes the default spacing and border for appropriate elements.
*/

dl,
dd,
h2,
h3,
h4,
h5,
h6,
hr,
p,
pre {
  margin: 0;
}
fieldset {
  margin: 0;
  padding: 0;
}
legend {
  padding: 0;
}
ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}
/*
Prevent resizing textareas horizontally by default.
*/
textarea {
  resize: vertical;
}
/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/
input::placeholder,
textarea::placeholder {
  opacity: 1; /* 1 */
  color: #9ca3af; /* 2 */
}
/*
Set the default cursor for buttons.
*/
button,
[role="button"] {
  cursor: pointer;
}
/*
Make sure disabled buttons don't get the pointer cursor.
*/
/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/
img,
svg,
video,
audio,
iframe,
embed,
object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}
/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/
img,
video {
  max-width: 100%;
  height: auto;
}
/*
Ensure the default browser behavior of the `hidden` attribute.
*/
[hidden] {
  display: none;
}
*,
::before,
::after {
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x: ;
  --tw-pan-y: ;
  --tw-pinch-zoom: ;
  --tw-scroll-snap-strictness: proximity;
  --tw-ordinal: ;
  --tw-slashed-zero: ;
  --tw-numeric-figure: ;
  --tw-numeric-spacing: ;
  --tw-numeric-fraction: ;
  --tw-ring-inset: ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur: ;
  --tw-brightness: ;
  --tw-contrast: ;
  --tw-grayscale: ;
  --tw-hue-rotate: ;
  --tw-invert: ;
  --tw-saturate: ;
  --tw-sepia: ;
  --tw-drop-shadow: ;
  --tw-backdrop-blur: ;
  --tw-backdrop-brightness: ;
  --tw-backdrop-contrast: ;
  --tw-backdrop-grayscale: ;
  --tw-backdrop-hue-rotate: ;
  --tw-backdrop-invert: ;
  --tw-backdrop-opacity: ;
  --tw-backdrop-saturate: ;
  --tw-backdrop-sepia: ;
}
/**
 * Return a length value for use in spacing between (margin) or around
 * (padding) elements.
 *
 * @param {number} [$space-unit] - The relative size of the space desired,
 *   from 0 (no space) to 9 (lots of space). Default 5.
 */
/**
 * Add border styles for all element sides (default) or a specific single side
 *
 * @param {'left'|'right'|'bottom'|'top'} [$side]
 */
/**
 * Style a shadow off of the element. `$active` variant is larger, darker,
 * intended for hovered/active elements.
 *
 * @param {boolean} [$active]
 */
/**
 * Override CSS rules.
 *
 * This mixin serves two purposes:
 * - Allows developers to be explicit that the contained CSS rule-set overrides
 *   styling imposed by another pattern
 * - Increases the specificity of the contained rule-set to aid in overriding
 *
 * Current implementation: Use the :not pseudo-class to increase specifity.
 */
/**
 * Add stylized focus to interactive elements such <input> or <textarea>
 *
 * @param {boolean} [$inset] -
 *   The focus style is implemented with a box-shadow and this parameter determines whether
 *   the box-shadow should be inset on the element. Set this to true when the element
 *   may be adjacent to another in order to prevent part of the outline from being obscured.
 */
/**
 * Display an outline on an element only when it has keyboard focus.
 *
 * This requires the browser to support the :focus-visible pseudo-selector [1]
 * or for the JS polyfill [2] to be loaded.
 *
 * [1] https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible
 * [2] https://github.com/WICG/focus-visible
 *
 * @param {boolean} $inset - Does the outline render inset or not
 */
/**
 * Apply a margin to all sides (default) or designated `$side` in specified
 * `$size` (default: spacing-unit 5)
 *
 * @param {number} [$size] - spacing-unit 0-9, default 5
 * @param {'left'|'right'|'top'|'bottom'} [$side]
 */
/**
 * Apply padding to all sides (default) or designated `$side` in specified
 * `$size` (default: spacing-unit 3)
 *
 * @param {number} [$size] - spacing-unit 0-9, default 3
 * @param {'left'|'right'|'top'|'bottom'} [$side]
 */
/**
 * Abstract mixin for establishing basic flex container. External users should
 * use `row` or `column` as needed. Default values here reflect default CSS
 * values for flex rules.
 *
 * @param {string} $direction [row] - value for flex-direction (row or column).
 * @param {string} $justify [flex-start] - How to align contents on main axis.
 *                                    Accepts and maps special value of 'right'
 *                                   (roughly analogous to horizontal alignment)
 * @param {string} $align [stretch] - How to align contents on cross axis.
 *                                    (roughly analogous to vertical alignment)
 */
/**
 * Establish a column (flex-direction: column) flex container.
 *
 * @param {string} $justify [flex-start] - How to justify flex contents
 * @param {string} $align [stretch] - How to align flex contents
 */
/**
 * Establish a row (flex-direction: column) flex container.
 *
 * @param {string} $justify [flex-start] - How to justify flex contents
 * @param {string} $align [stretch] - How to align flex contents
 */
/**
 * Put `$size` of vertical space between all immediate children.
 *
 * @param {length} [$size] - Relative size of spacing, 0 - 9. Default 5
 */
/**
 * Put `$size` of horizontal space between all immediate children.
 *
 * @param {length} [$size] - Relative size of spacing, 0 - 9. Default 3
 */
/**
 * Position an element vertically and horizontally within the viewport
 */
/**
 * Position an element, absolutely, vertically and horizontally
 */
/**
 * Semi-opaque overlay, full-viewport
 */
/**
 * General styling for a text-like input
 */
/**
 * Styling for <input type="text" />. Includes a state class for errors.
 */
/**
 * A pattern for pairing a text input (left) with an icon-only button (right).
 *
 * Removes border radiuses where the two elements touch, and adds a border
 * to the button to align with the `input`.
 *
 * Sample usage:
 *  <div.hyp-text-input-with-button />
 *   <input.hyp-text-input />
 *   <button.hyp-IconButton />
 *  </div>
 */
/**
 * Style a <label> element that wraps around its input, e.g.
 *
 * <label>
 *  <input type="checkbox" />
 *  <span>I am a label</span>
 * </label>
 */
/**
 * A checkbox input field.
 *
 * Style appearance of <input[type="checkbox"]> using an <svg> element.
 *
 * Style the input itself such that it is not visible to sighted users, and
 * instead use the SVG for checkbox appearance. The SVG and input are composited
 * such that users are still interacting with the input.
 *
 * See https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
 *
 * The <svg> element should be contained within a <span> immediately following
 * (adjacent sibling to) the <input>:
 *
 *   <input class="hyp-checkbox" type="checkbox" />
 *   <span> <!-- generated by SvgIcon -->
 *     <svg.hyp-svg-checkbox>
 *       <rect.hyp-svg-checkbox--background />
 *       <polyline.hyp-svg-checkbox--checkmark />
 *     </svg>
 *   </span>
 */

/**
 * This mixin allows other mixins to declare rules that should only apply
 * when a particular theme is active.
 *
 * The only known theme at present is the "clean" theme and it only applies
 * to the client (Sidebar, Notebook) application.
 *
 * The client application provides relatively minimalistic support for a
 * "clean" theme by applying a `theme-clean` class to the application container
 * element.
 *
 * For example, let's say that the clean-theme variant of a pattern called
 * `banana` should not have any borders applied. Its mixin can be written:
 *
 * @mixin banana {
 *  border: 1px solid pink;
 *  @include theme('clean') {
 *    border: none;
 *  }
 * }
 *
 * .hyp-banana {
 *   @include banana;
 * }
 *
 * This would result in CSS:
 *
 * .hyp-banana {
 *   border: 1px solid pink;
 * }
 *
 * .theme-clean .hyp-banana {
 *   border: none;
 * }
 *
 * Note: As implemented here, theming increases specificity. Rules defined in
 * theming cannot be overridden with utility classes as currently structured.
 */
/**
 * Patterns that are composites of multiple atomic utilities, but
 * are not standalone components.
 */
/**
 * Give an element a border, background color and internal vertical spacing
 */
/**
 * A frame with a shadow and (optional) shadow hover effect. Fills available
 * horizontal space.
 *
 * @param {boolean} [$with-hover] - Should this frame have a hover effect?
 */
/**
 * A container that lays out a collection of actions—typically buttons. Default
 * to a row layout, but also available as `column`.
 *
 * @param {'row'|'column'} [$direction]
 */
/**
 * A modal container, with responsive positioning and sizing.
 *
 * A modal should contain one immediate-child element; in most cases, an
 * element that applies the dialog[1] pattern. Content within the dialog
 * (grandchild elements of modal) can be managed with `overflow` rules so as not
 * to exceed the size constraints of the modal within the viewport.
 *
 * Example structure follows:
 *
 * <modal>
 *   <dialog>
 *     <div /> <!-- dialog can contain any arbitrary content -->
 *     <div style="overflow: auto">
 *       This content will scroll vertically if it is too tall for the
 *       available space in the modal.
 *     </div>
 *     <div />
 *     ...
 *   </dialog>
 * </modal>
 *
 * [1]: The modal's immediate child need not specifically apply the dialog
 *      pattern, but any element that needs to manage overflow within the modal
 *      must be a grandchild of the modal container element.
 */
/**
 * A scrolling "frame" that shows scroll-hint shadows at the top and bottom
 * of the frame if:
 *  - The content height exceeds the frame height: i.e. can be scrolled, and
 *  - The content is scrollable in the shadow's direction (up or down)
 *
 * Shadows are not visible once the frame has been scrolled all the way in the
 * shadow's direction. Shadows are not visible if the height of the content
 * does not overflow the frame (is not scrollable).
 *
 * The shadow hinting is handled by four positioned background gradients:
 *   - One gradient each at top and bottom of frame that obscure the shadow hints
 *     (shadow covers). These use `background-attachment: local`, which makes
 *     their position fixed to the _content_ within the scrollbox.
 *   - One gradient each at the top and the bottom of the frame that are the
 *     shadow hints (shadows). These use `background-attachment: scroll` such
 *     that they are always positioned at the top and the bottom of the
 *     _scrollbox_ frame. When these positions align with the positions of the
 *     shadow covers--at the top and the bottom of the overflowing content--
 *     they will be obscured by those shadow covers.
 *
 * See https://lea.verou.me/2012/04/background-attachment-local/
 *
 * Safari's behavior is different because of a bug with
 * `background-attachment: local`.
 * See https://bugs.webkit.org/show_bug.cgi?id=219324
 * In Safari:
 *   - Scroll-hint shadows do not appear if content does not overflow (this is
 *     consistent with other browsers)
 *   - Only the bottom scroll-hint shadow appears if content overflows
 *   - The bottom scroll-hint shadow is always present, even if content is
 *     fully scrolled
 *
 * @param {CSSLength} [$shadow-top-position=0] - Top scroll-indicating shadow
 *   (y) position. Default 0: at top edge of scrollbox. Use case: move
 *   shadow down to accommodate a sticky header of a known height, such that the
 *   shadow appears below the header(s).
 * @param {CSSLength} [$shadow-bottom-position=100%] - Bottom scroll-indicating
 *   shadow position relative to scrollbox. Default 100%: flush to bottom.
 */
/**
 * A scrollbox with the top shadow repositioned down by touch-target-size
 * to accommodate, e.g., a sticky header at the top of the scrollable content.
 */
/**
 * A sticky container that is sized one-touch-unit high. This is currently
 * expanded upon by table styling, but not used in other patterns (yet).
 */

/**
 * A panel is a card that adds an optional header and/or close button positioning.
 * Panels using an icon-only button as a close button should use the `--closeable`
 * modifier.
 */

/**
 * Style an svg icon as a loading spinner
 *
 * @param {'small'|'medium'|'large'} [$size='medium'] - Relative size of
 *   spinner image
 */
/**
 * Style a container with an svg.&__spinner as a full-screen loading spinner,
 * by applying an overlay to the container and fixed-centered positioning to
 * the contained svg icon
 */

/* Make the wrapper element's size match the contained `svg` element  */

.AdderToolbar {
  all: initial;
  position: absolute;
  box-sizing: border-box;
  direction: ltr;
  border-radius: 4px;
  -webkit-user-select: none;
  user-select: none;
  box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.25);
  opacity: 0.05;
  animation-duration: 80ms;
  animation-timing-function: ease-in;
  animation-fill-mode: forwards;
}
.AdderToolbar--up.is-active {
  animation-name: adder-fade-in, adder-pop-up;
}

@keyframes adder-fade-in {
  0% {
    opacity: 0.05;
  }
  20% {
    opacity: 0.7;
  }
  100% {
    opacity: 1;
  }
}
@keyframes adder-pop-up {
  from {
    transform: scale(0.8) translateY(10px);
  }
  to {
    transform: scale(1) translateY(0px);
  }
}
@keyframes adder-pop-down {
  from {
    transform: scale(0.8) translateY(-10px);
  }
  to {
    transform: scale(1) translateY(0px);
  }
}

/* TODO: cleanup all these useless styles and comments */
/**
 * Abstract mixin for establishing basic flex container. External users should
 * use `row` or `column` as needed. Default values here reflect default CSS
 * values for flex rules.
 *
 * @param {string} $direction [row] - value for flex-direction (row or column).
 * @param {string} $justify [flex-start] - How to align contents on main axis.
 *                                    Accepts and maps special value of 'right'
 *                                   (roughly analogous to horizontal alignment)
 * @param {string} $align [stretch] - How to align contents on cross axis.
 *                                    (roughly analogous to vertical alignment)
 */
/**
 * Establish a column (flex-direction: column) flex container.
 *
 * @param {string} $justify [flex-start] - How to justify flex contents
 * @param {string} $align [stretch] - How to align flex contents
 */
/**
 * Establish a row (flex-direction: column) flex container.
 *
 * @param {string} $justify [flex-start] - How to justify flex contents
 * @param {string} $align [stretch] - How to align flex contents
 */
/**
 * Establish a horizontal (margin) rhythm for this element's immediate
 * children (i.e. put equal space between children).
 *
 * This mixin uses `!important` such that it can compete with specificity
 * of reset rules that set some of our element's margins to 0. That allows
 * these rules—which are applied to a parent element—to be able to assert
 * margins, as it should be able to do.
 *
 * @param $size [5px] - Size of horizontal margin between child elements
 */
/**
 * Establish a vertical (margin) rhythm for this element's immediate
 * children (i.e. put equal space between children).
 *
 * This mixin uses `!important` such that it can compete with specificity
 * of reset rules that set some of our element's margins to 0. That allows
 * these rules—which are applied to a parent element—to be able to assert
 * margins, as it should be able to do.
 *
 * @param $size [var.$layout-space--medium]: Spacing size (padding)
 * @FIXME Find workaround for SvgIcon exception
 */
/**
 * Establish vertical space outside of elements within the container
 *
 * @param $size [var.$layout-space--medium]: Spacing size (padding)
 */
/**
 * Establish horizontal space outside of elements within the container
 *
 * @param $size [var.$layout-space--medium]: Spacing size (padding)
 */
/**
 * Button mixins for use by the `Button` component or any component that wishes
 * to override default `Button`-component styling. These mixins are meant to be
 * applied to `<button>` HTML elements, with an optional contained icon
 * (i.e. `SvgIcon` component or `<svg>` element).
 *
 * To customize default `Button` styling, start with an appropriate button mixin
 * and extend or or override rules as necessary in your component's SCSS module.
 *
 * e.g., let's pretend you wish the `Button` used in `MyComponent`
 * to have a pink background. In `my-component.scss`, you might do something like:
 *
 * .my-component-button {
 *    @include button--labeled;
 *    background-color: pink;
 * }
 *
 * And pass 'my-component-button' as the `className` prop to `Button`.
 */
/**
 * Basic color, sizing, padding and hover for buttons.
 */
/*
 * A button with an icon and no displayed text.
 *
 * @param {boolean} [$with-active-state] - Adds an active state color when pressed / expanded
 * @param {boolean} [$coarse-min-size] - Overrides the minimum height and width in mobile view.
 */
/**
 * A button with displayed text. It may or may not have an icon. The default
 * colors assume the button is displayed on a white background.
 *
 * @param {CSSColor} [$background-color] - The button's background color when
 *   neither hovered nor active.
 * @param {CSSColor} [$active-background-color]
 */
/**
 * A labeled button that is a primary action.
 */

/**
 * A straightforward "frame" that serves as a basis for other card-like
 * patterns. May be used on its own for components that don't need all of
 * `card` or `panel's` bells and whistles.
 */
/**
 * A "card"-like pattern that may be displayed in vertical lists, a la
 * annotation (thread) cards. Will vertically-space its children. Adds a
 * hover/active intensified box shadow and accounts for "theme-clean" affordances.
 */
/**
 * horizontally-oriented collection of linked icons
 */
/**
 * A pattern for styling a little "pointer" (arrow) icon that attaches to
 * menu content and serves as a visual anchor back to the triggering
 * button/element. When using, you'll need to provide the appropriate
 * positioning details to get the pointer to be where you want it in the
 * given menu.
 *
 * @param {string} [$direction] - Which direction the arrow should "point"
 */
/**
 * Base styles for a "panel"-like element, with appropriate
 * padding, heading and close-button styles.
 *
 * @param {length} [$rhythm] - An optional value to use for vertical rhythm
 *   (spacing, vertically)
 */
/**
 * `panel` with tighter margins and padding, for use in more confined spaces
 */
/**
 * A full-width banner with optional "type" and styled icon at left
 */
/**
 * A variant of `banner` for use as a toast message container. Narrower,
 * lighter border, more padding around message text.
 */

.Toolbar {
  position: absolute;
  left: -33px;
  width: 33px;
  z-index: 2;
}
@media (pointer: coarse) {
  .Toolbar {
    left: -32px;
    width: 32px;
  }
}

.Toolbar__buttonbar {
  margin-top: 0.75em;
}
.Toolbar__buttonbar > * + *:not([class*="SvgIcon--inline"]) {
  margin-top: 5px !important;
}

.Toolbar__button {
  padding: 0;
  margin: 0;
  background-color: transparent;
  border-style: none;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  padding: 0.5em;
  border: none;
  transition: color 0.2s ease-out, background-color 0.2s ease-out,
    opacity 0.2s ease-out;
  color: #737373;
  background: #fff;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
  border: 1px solid #dbdbdb;
  border-radius: 4px;
}
.Toolbar__button:focus {
  outline: none;
  box-shadow: 0 0 0 2px #59a7e8;
}
.Toolbar__button:focus:not(:focus-visible) {
  outline: none;
  box-shadow: none;
}
.Toolbar__button svg {
  width: 16px;
  height: 16px;
}
.Toolbar__button:hover:not([disabled]),
.Toolbar__button:focus:not([disabled]) {
  color: #202020;
}
@media (pointer: coarse) {
  .Toolbar__button {
    min-width: 44px;
    min-height: 44px;
  }
  .Toolbar__button {
    min-width: 32px;
    min-height: 32px;
  }
}

.Toolbar__sidebar-toggle {
  padding: 0;
  margin: 0;
  background-color: transparent;
  border-style: none;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  padding: 0.5em;
  border-radius: 2px;
  border: none;
  transition: color 0.2s ease-out, background-color 0.2s ease-out,
    opacity 0.2s ease-out;
  color: #737373;
  background: #fff;
  border-left: 1px solid #dbdbdb;
  border-bottom: 1px solid #dbdbdb;
  padding-left: 2px;
  width: 33px;
  height: 40px;
  color: #9c9c9c;
}
.Toolbar__sidebar-toggle:focus {
  outline: none;
  box-shadow: 0 0 0 2px #59a7e8;
}
.Toolbar__sidebar-toggle:focus:not(:focus-visible) {
  outline: none;
  box-shadow: none;
}
.Toolbar__sidebar-toggle svg {
  width: 16px;
  height: 16px;
}
.Toolbar__sidebar-toggle:hover:not([disabled]),
.Toolbar__sidebar-toggle:focus:not([disabled]) {
  color: #202020;
}
@media (pointer: coarse) {
  .Toolbar__sidebar-toggle {
    min-width: 44px;
    min-height: 44px;
  }
  .Toolbar__sidebar-toggle {
    min-width: 32px;
    min-height: 32px;
  }
}

/** Visible with clean theme */

.hyp-u-border {
  border: 1px solid #dbdbdb;
}

.hyp-u-bg-color--white {
  background-color: white;
}

/* Spacing classes */

/* Margin and padding classes */

/* Flex-layout classes */
.hyp-u-layout-row {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: stretch;
}

/* Positioning and overlay classes */

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.visible {
  visibility: visible;
}

.static {
  position: static;
}

.fixed {
  position: fixed;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.sticky {
  position: -webkit-sticky;
  position: sticky;
}

.ml-1 {
  margin-left: 0.25rem;
}

.mb-2 {
  margin-bottom: 0.5rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.mr-4 {
  margin-right: 1rem;
}

.block {
  display: block;
}

.inline {
  display: inline;
}

.flex {
  display: flex;
}

.table {
  display: table;
}

.grid {
  display: grid;
}

.contents {
  display: contents;
}

.hidden {
  display: none;
}

.h-16 {
  height: 4rem;
}

.h-full {
  height: 100%;
}

.h-8 {
  height: 2rem;
}

.w-full {
  width: 100%;
}

.flex-1 {
  flex: 1 1 0%;
}

.resize {
  resize: both;
}

.flex-row {
  flex-direction: row;
}

.flex-col {
  flex-direction: column;
}

.items-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.whitespace-nowrap {
  white-space: nowrap;
}

.rounded {
  border-radius: 0.25rem;
}

.rounded-lg {
  border-radius: 0.5rem;
}

.border-t {
  border-top-width: 1px;
}

.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}

.p-3 {
  padding: 0.75rem;
}

.p-4 {
  padding: 1rem;
}

.p-2 {
  padding: 0.5rem;
}

.py-1 {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

.py-3 {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
}

.px-4 {
  padding-left: 1rem;
  padding-right: 1rem;
}

.py-2 {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.pt-0 {
  padding-top: 0px;
}

.text-center {
  text-align: center;
}

.text-xl {
  font-size: 16px;
}

.text-lg {
  font-size: 14px;
}

.text-sm {
  font-size: 11px;
  line-height: 1.4;
}

.font-medium {
  font-weight: 500;
}

.font-normal {
  font-weight: 400;
}

.font-semibold {
  font-weight: 600;
}

.font-bold {
  font-weight: 700;
}

.leading-none {
  line-height: 1;
}

.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}

.underline {
  -webkit-text-decoration-line: underline;
  text-decoration-line: underline;
}

.shadow {
  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),
    0 1px 2px -1px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.outline {
  outline-style: solid;
}

.blur {
  --tw-blur: blur(8px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast)
    var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate)
    var(--tw-sepia) var(--tw-drop-shadow);
}

.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast)
    var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate)
    var(--tw-sepia) var(--tw-drop-shadow);
}

.transition {
  transition-property: color, background-color, border-color, fill, stroke,
    opacity, box-shadow, transform, filter, -webkit-text-decoration-color,
    -webkit-backdrop-filter;
  transition-property: color, background-color, border-color,
    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,
    backdrop-filter;
  transition-property: color, background-color, border-color,
    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,
    backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
:host > * {
  font-family: "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
}

.annotator-frame {
  position: fixed;
  top: 0;
  left: 100%;
  height: 100%;
  z-index: 2147483647;
  direction: ltr;
  font-size: 12px;
  line-height: 20px;
  -webkit-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
}
.annotator-frame.annotator-collapsed {
  margin-left: 0;
}

/** Affordances for clean theme */

/*
  Mobile layout
  240-479 px
*/
@media screen and (min-width: 15em) {
  .annotator-frame {
    width: 90%;
    margin-left: -90%;
  }
}
/*
  Wide mobile layout
  480-599 px
*/
@media screen and (min-width: 30em) {
  .annotator-frame {
    width: 70%;
    margin-left: -70%;
  }
}
/*
  Tablet layout
  600-above px
*/
@media screen and (min-width: 37.5em) {
  .annotator-frame {
    transition: margin-left 150ms cubic-bezier(0.55, 0, 0.2, 0.8);
    width: 350px;
    margin-left: -300px;
  }
}
